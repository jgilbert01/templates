# this is the role that the cicd pipeline assumes
# with the least privilege to kick off cloudformation
resources:
  Resources:
    DeploymentActionRole:
      Type: AWS::IAM::Role
      Condition: IsWest
      Properties: 
        RoleName: ${self:custom.subsys}-deploy-${opt:stage}
        AssumeRolePolicyDocument:
          Statement:
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt: [ CiCdUser, Arn ]
            Action: sts:AssumeRole
        Policies:
          - PolicyName: deploy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'cloudformation:ValidateTemplate'
                    - 'dynamodb:DescribeLimits'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'cloudformation:CreateStack'
                    - 'cloudformation:UpdateStack'
                    - 'cloudformation:DescribeStacks'
                    - 'cloudformation:DescribeStackEvents'
                    - 'cloudformation:DescribeStackResource'
                    - 'cloudformation:ListStackResources'
                    - 'cloudformation:GetValueFromCf'
                    - 'cloudformation:CreateChangeSet'
                    - 'cloudformation:DeleteChangeSet'
                    - 'cloudformation:DescribeChangeSet'
                    - 'cloudformation:ExecuteChangeSet'
                  Resource: '*'
                  # Resource:
                  #   - !Sub 'arn:${AWS::Partition}:cloudformation:*:${aws:accountId}:*/${self:custom.subsys}-*'
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:PutObject'
                    - 's3:PutObjectAcl'
                    - 's3:GetValueFromS3'
                    - 's3:GetBucketLocation'
                    - 's3:ListBucket'
                    - 's3:ListObjectsV2'
                    - 's3:GetObjectVersion'
                    - 's3:HeadObject'
                    - 's3:DeleteObject'
                    - 's3:DeleteObjects'
                    - 's3:DeleteObjectVersion'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:s3:::${self:custom.org}-${self:custom.subsys}-sls-deploy-${opt:stage}-*'
                    - !Sub 'arn:${AWS::Partition}:s3:::${self:custom.org}-${self:custom.subsys}-sls-deploy-${opt:stage}-*/*'
                    - !Sub 'arn:${AWS::Partition}:s3:::${self:custom.org}-${self:custom.subsys}-ui-main-${opt:stage}-*'
                    - !Sub 'arn:${AWS::Partition}:s3:::${self:custom.org}-${self:custom.subsys}-ui-main-${opt:stage}-*/*'
                - Effect: Allow
                  Action:
                    - 'iam:GetRole'
                    - 'iam:PassRole'
                    # - 'iam:CreateServiceLinkedRole'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:iam::${aws:accountId}:role/${self:custom.subsys}-cfnExecRole-${opt:stage}'
                - Effect: Allow
                  Action:
                    - 'secretsmanager:PutSecretValue'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:secretsmanager:*:${aws:accountId}:secret:${self:custom.subsys}-*/*'
                - Effect: Allow
                  Action:
                    - 'apigateway:GET'
                    - 'apigateway:PUT'
                    - 'apigateway:PATCH'
                    - 'apigateway:POST'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:apigateway:*::/*'
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    # - dynamodb:Query
                    # - dynamodb:Scan
                    # - dynamodb:PutItem
                    # - dynamodb:UpdateItem
                    # - dynamodb:DeleteItem
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:dynamodb:*:${aws:accountId}:table/${self:custom.subsys}-*'
                # - Effect: Allow
                #   Action:
                #     - lambda:InvokeFunction
                #   Resource:
                #     - !Sub 'arn:${AWS::Partition}:lambda:*:${aws:accountId}:function:${self:custom.subsys}-*'
                # - Effect: Allow
                #   Action:
                #     - dms:DescribeReplicationTasks
                #     - dms:StartReplicationTask
                #     - dms:StopReplicationTask
                #   Resource:
                #     # - !Sub 'arn:${AWS::Partition}:dms:*:${aws:accountId}:task:*'
                #     - '*'

  Outputs:
    DeploymentActionRoleArn:
      Condition: IsWest
      Value:
        Fn::GetAtt: [ DeploymentActionRole, Arn ]
