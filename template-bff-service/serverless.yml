service: ${self:custom.subsys}-bff-service

provider:
  name: aws
  deploymentBucket: ${file(serverless/cfn.yml):deploymentBucket}
  iam:
    deploymentRole: ${file(serverless/cfn.yml):deploymentRole}
    role: ${file(serverless/iam.yml):role}
  stackTags: ${file(serverless/tags.yml)}
  runtime: nodejs20.x
  logRetentionInDays: ${param:logRetentionInDays}
  environment: ${file(serverless/config.yml):environment}
  endpointType: REGIONAL
  # apiGateway: ${file(serverless/apig.yml):apiGateway}

params: ${file(serverless/config.yml):params}
custom: ${file(serverless/config.yml):custom}
package:
  individually: true

plugins:
  - serverless-aws-describe-plugin
  # - serverless-kinesis-esm-plugin
  # - serverless-secrets-mgr-plugin
  - serverless-webpack
  - serverless-offline

functions:
  rest:
    handler: src/rest/index.handle
    events:
      - http:
          path: '{proxy+}'
          method: any
          cors: ${file(serverless/apig.yml):cors}
          authorizer: ${file(serverless/apig.yml):authorizer}
  listener:
    handler: src/listener/index.handle
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ ListenerQueue, Arn ]
    #       functionResponseType: ReportBatchItemFailures
    #   - stream:
    #       type: kinesis
    #       arn: ${self:provider.environment.STREAM_ARN}
    #       batchSize: 100
    #       startingPosition: TRIM_HORIZON
    #       filterPatterns:
    #         - data:
    #             type:
    #                - prefix: 'thing-'
  trigger:
    handler: src/trigger/index.handle
    events:
      - stream:
          type: dynamodb
          arn: ${self:custom.tableStreamArn}
          batchSize: 100
          startingPosition: TRIM_HORIZON
          filterPatterns: ${file(serverless/dynamodb.yml):filterPatterns}
      # - sqs:
      #     arn:
      #       Fn::GetAtt: [ TriggerQueue, Arn ]

resources:
  - ${file(serverless/apig.yml):resources}
  - ${file(serverless/sqs-listener.yml):resources}
  - ${file(serverless/dynamodb.yml):resources}
  # - ${file(serverless/s3.yml):resources}
  # - ${file(serverless/sns.yml):resources}
  # - ${file(serverless/sqs-trigger.yml):resources}
  # - ${file(serverless/secrets.yml):resources}
  - ${file(serverless/conditions.yml)}
