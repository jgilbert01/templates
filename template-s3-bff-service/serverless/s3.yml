iamRoleStatements:
  Effect: Allow
  Action:
    - s3:PutObject
    - s3:PutObjectAcl
    - s3:DeleteObject
    - s3:GetObject
    - s3:GetObjectVersion
    - s3:ListBucket
    - s3:ListBucketVersions
    # - s3:GetObjectTagging
    # - s3:PutObjectTagging
  Resource:
    - Fn::GetAtt: [ Bucket, Arn ]
    - Fn::Join:
      - '/'
      - - Fn::GetAtt: [ Bucket, Arn ]
        - '*'      

replication:
  bucketArn: arn:${self:custom.partition}:s3:::${self:custom.org}-${self:service}-${opt:stage}-${self:custom.replication.region.${opt:region}}
  roleName: ${self:service}-${opt:stage}-${opt:region}-replicate
  region:
    us-east-1: us-west-2
    us-west-2: us-east-1

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      # DependsOn: [ Topic, TopicPolicy ]
      Properties:
        BucketName: ${self:custom.org}-${self:service}-${opt:stage}-${opt:region}
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins: [ '*' ]
              AllowedHeaders: [ '*' ]
              AllowedMethods: [ GET, PUT ]
        LifecycleConfiguration:
          Rules:
            - Prefix: ''
              Status: Enabled
              ExpirationInDays: 99

        # ReplicationConfiguration:
        #   Role: arn:${self:custom.partition}:iam::${aws:accountId}:role/${self:custom.replication.roleName}
        #   Rules:
        #     - Destination:
        #         Bucket: ${self:custom.replication.bucketArn}
        #       Status: Enabled
        #       Prefix: ''

        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:*
              Topic:
                Ref: Topic
            - Event: s3:ObjectRemoved:*
              Topic:
                Ref: Topic
        #     - Event: s3:ObjectRestore:*
        #       Topic:
        #         Ref: Topic
        #     - Event: s3:LifecycleExpiration:*
        #       Topic:
        #         Ref: Topic
        #     - Event: s3:LifecycleTransition
        #       Topic:
        #         Ref: Topic

    # BucketReplicationRole:
    #   DependsOn: Bucket
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: ${self:custom.replication.roleName}
    #     PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${aws:accountId}:policy/${self:custom.subsys}-boundary-${opt:stage}'
    #     AssumeRolePolicyDocument:
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - s3.amazonaws.com
    #           Action:
    #             - sts:AssumeRole
    #     Policies:
    #       - PolicyName: replicate
    #         PolicyDocument:
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - s3:GetReplicationConfiguration
    #                 - s3:ListBucket
    #               Resource:
    #                 Fn::GetAtt: [ Bucket, Arn ]
    #             - Effect: Allow
    #               Action:
    #                 - s3:GetObjectVersion
    #                 - s3:GetObjectVersionAcl
    #               Resource:
    #                 - Fn::Join:
    #                   - ''
    #                   - - Fn::GetAtt: [ Bucket, Arn ]
    #                     - '*'
    #             - Effect: Allow
    #               Action:
    #                 - s3:ReplicateObject
    #                 - s3:ReplicateDelete
    #                 - s3:ObjectOwnerOverrideToBucketOwner
    #               Resource: ${self:custom.replication.bucketArn}/*

    # BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket:
    #       Ref: Bucket
    #     PolicyDocument:
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             AWS: arn:${self:custom.partition}:iam::${aws:accountId}:root
    #           Action:
    #             - s3:ReplicateDelete
    #             - s3:ReplicateObject
    #             - s3:ObjectOwnerOverrideToBucketOwner
    #           Resource:
    #             - Fn::Join:
    #               - ''
    #               - - Fn::GetAtt: [ Bucket, Arn ]
    #                 - '/*'

  Outputs:
    BucketName:
      Value:
        Ref: Bucket
    BucketArn:
      Value:
        Fn::GetAtt: [ Bucket, Arn ]
